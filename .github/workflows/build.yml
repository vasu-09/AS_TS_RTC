name: Build & Push Images

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}   # e.g. moc-core-1234
  GCP_REGION: asia-south1
  AR_REPO: moc-repo
  AR_HOST: asia-south1-docker.pkg.dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Auth to Google Cloud (OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}   # projects/<PROJECT_NUMBER>/locations/global/workloadIdentityPools/github-pool/providers/github
          service_account: ${{ secrets.GCP_SA_EMAIL }}                  # github-ci@<PROJECT_ID>.iam.gserviceaccount.com

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Enable Docker to push to Artifact Registry
        run: gcloud auth configure-docker ${{ env.AR_HOST }} -q

      - name: Compute tag
        id: vars
        run: echo "TAG=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build & push images with Cloud Build (custom staging bucket)
        shell: bash
        run: |
          set -euo pipefail
          TAG=${{ steps.vars.outputs.TAG }}
          AR="${{ env.AR_HOST }}/${{ env.GCP_PROJECT_ID }}/${{ env.AR_REPO }}"
          STAGING="gs://moc-build-src-${{ env.GCP_PROJECT_ID }}/src"
          LOGS="gs://moc-build-src-${{ env.GCP_PROJECT_ID }}/logs"

          # Find all tracked Dockerfiles
          mapfile -t DOCKERFILES < <(git ls-files -- */Dockerfile)
          if [[ ${#DOCKERFILES[@]} -eq 0 ]]; then
            echo "No Dockerfiles found in the repo."
            exit 1
          fi

          # Optionally skip non-deployable Dockerfiles (add more paths if needed)
          FILTER_OUT=("backend/Dockerfile")
          FILTERED=()
          for DF in "${DOCKERFILES[@]}"; do
            skip=0
            for F in "${FILTER_OUT[@]}"; do [[ "$DF" == "$F" ]] && skip=1 && break; done
            [[ $skip -eq 0 ]] && FILTERED+=("$DF")
          done
          DOCKERFILES=("${FILTERED[@]}")

          echo "Dockerfiles found:"
          printf ' - %s\n' "${DOCKERFILES[@]}"

          for DF in "${DOCKERFILES[@]}"; do
            [[ -z "$DF" ]] && continue
            MODULE="$(dirname "$DF")"
            NAME="$(basename "$MODULE")"
            IMAGE="${AR}/${NAME}:${TAG}"
            echo ">>> Building $NAME -> $IMAGE"

            if grep -qE '^ARG[[:space:]]+MODULE=' "$DF"; then
              echo "Detected Option B style (repo-root context)."
              gcloud builds submit \
                --gcs-source-staging-dir "$STAGING" \
                --gcs-log-dir "$LOGS" \
                --tag "$IMAGE" \
                --file "$DF" \
                --build-arg MODULE="$MODULE" \
                .
            else
              echo "Detected Option A style (module folder context)."
              gcloud builds submit \
                --gcs-source-staging-dir "$STAGING" \
                --gcs-log-dir "$LOGS" \
                --tag "$IMAGE" \
                "$MODULE"
            fi
          done

      - name: List pushed images
        run: gcloud artifacts docker images list "${{ env.AR_HOST }}/${{ env.GCP_PROJECT_ID }}/${{ env.AR_REPO }}" --include-tags
