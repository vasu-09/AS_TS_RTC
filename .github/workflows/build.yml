name: Build & Push Images (runner)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: asia-south1
  AR_REPO: moc-repo
  AR_HOST: asia-south1-docker.pkg.dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # OIDC to get gcloud credentials bound to your CI SA
      - name: Auth to Google Cloud (OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Compute tag
        id: vars
        run: echo "TAG=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Docker buildx setup
        uses: docker/setup-buildx-action@v3

      - name: Login to Artifact Registry
        run: gcloud auth configure-docker ${{ env.AR_HOST }} -q

      - name: Build & push images (auto-discovered Dockerfiles)
        shell: bash
        run: |
          set -euo pipefail
          TAG=${{ steps.vars.outputs.TAG }}
          AR="${{ env.AR_HOST }}/${{ env.GCP_PROJECT_ID }}/${{ env.AR_REPO }}"

          # Find all tracked Dockerfiles
          mapfile -t DOCKERFILES < <(git ls-files -- */Dockerfile)
          if [[ ${#DOCKERFILES[@]} -eq 0 ]]; then
            echo "No Dockerfiles found in the repo."
            exit 1
          fi

          # Optionally skip non-deployable Dockerfiles
          FILTER_OUT=("backend/Dockerfile")
          FILTERED=()
          for DF in "${DOCKERFILES[@]}"; do
            skip=0
            for F in "${FILTER_OUT[@]}"; do [[ "$DF" == "$F" ]] && skip=1 && break; done
            [[ $skip -eq 0 ]] && FILTERED+=("$DF")
          done
          DOCKERFILES=("${FILTERED[@]}")

          echo "Dockerfiles found:"
          printf ' - %s\n' "${DOCKERFILES[@]}"

          for DF in "${DOCKERFILES[@]}"; do
            MODULE="$(dirname "$DF")"
            NAME="$(basename "$MODULE")"
            IMAGE="${AR}/${NAME}:${TAG}"
            echo ">>> Building $NAME -> $IMAGE"

            # If your Dockerfile uses ARG MODULE (repo-root build), pass build-arg & use context '.'
            if grep -qE '^ARG[[:space:]]+MODULE=' "$DF"; then
              docker build --build-arg MODULE="$MODULE" -t "$IMAGE" -f "$DF" .
            else
              docker build -t "$IMAGE" "$MODULE"
            fi
            docker push "$IMAGE"
          done

      - name: List pushed images (sanity)
        run: gcloud artifacts docker images list "${{ env.AR_HOST }}/${{ env.GCP_PROJECT_ID }}/${{ env.AR_REPO }}" --include-tags
